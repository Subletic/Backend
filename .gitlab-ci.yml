variables:
  # 1) Name of directory where restore and build objects are stored.
  OBJECTS_DIRECTORY: 'obj'
  # 2) Name of directory used for keeping restored dependencies.
  NUGET_PACKAGES_DIRECTORY: '.nuget'
  # 3) A relative path to the source code from project repository root.
  # NOTE: Please edit this path so it matches the structure of your project!
  SOURCE_CODE_PATH: 'Backend'
  TESTS_PATH: 'BackendTests'
  DOTNET_NOLOGO: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_ARGS: >
    -p:ContinuousIntegrationBuild=true
    -p:Deterministic=true

cache:
  # Per-stage and per-branch caching.
  key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
  paths:
    # Specify three paths that should be cached:
    #
    # 1) Main JSON file holding information about package dependency tree, packages versions,
    # frameworks etc. It also holds information where to the dependencies were restored.
    - '$SOURCE_CODE_PATH/$OBJECTS_DIRECTORY/project.assets.json'
    - '$TESTS_PATH/$OBJECTS_DIRECTORY/project.assets.json'
    # 2) Other NuGet and MSBuild related files. Also needed.
    - '$SOURCE_CODE_PATH/$OBJECTS_DIRECTORY/*.csproj.nuget.*'
    - '$TESTS_PATH/$OBJECTS_DIRECTORY/*.csproj.nuget.*'
    # 3) Path to the directory where restored dependencies are kept.
    - '$NUGET_PACKAGES_DIRECTORY'
  #
  # 'pull-push' policy means that latest cache will be downloaded (if it exists)
  # before executing the job, and a newer version will be uploaded afterwards.
  # Such a setting saves time when there are no changes in referenced third-party
  # packages.
  #
  # For example, if you run a pipeline with changes in your code,
  # but with no changes within third-party packages which your project is using,
  # then project restore will happen quickly as all required dependencies
  # will already be there â€” unzipped from cache.

  # 'pull-push' policy is the default cache policy, you do not have to specify it explicitly.
  policy: pull-push

stages:
  - build
  - lint
  - test
  - build-docker
  - deploy

build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:7.0
  script: |
    echo "Building the project..."

    dotnet restore ${DOTNET_ARGS}
    dotnet build ${DOTNET_ARGS}
  artifacts:
    paths:
      - $SOURCE_CODE_PATH/bin/Debug/net7.0/

lint:
  stage: lint
  image: mcr.microsoft.com/dotnet/sdk:7.0
  script: |
    echo "Checking Code-style..."

    dotnet tool restore
    dotnet tool install -g roslynator.dotnet.cli --version 0.6.0

    /root/.dotnet/tools/roslynator analyze
  dependencies:
    - build

test:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:7.0
  variables:
    CONFIGURATION: 'Debug'
    COVERAGE_FLAG: 'XPlat Code Coverage'
    LOGGER_FLAG: 'junit;LogFilePath=..\artifacts\{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose'
  before_script:
    - dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools
  script: |
    echo "Running Unit Tests..."

    dotnet test \
      --collect:"$COVERAGE_FLAG" \
      --test-adapter-path:. \
      --logger:"$LOGGER_FLAG" \
      ${DOTNET_ARGS}

    ./tools/reportgenerator \
      -reports:"${TESTS_PATH}/**/coverage.cobertura.xml" \
      -targetdir:Reports_Coverage \
      -reportTypes:"TextSummary;Html"
    cat ./Reports_Coverage/Summary.txt

    echo 'End Summary'
  coverage: /Line coverage[\s\S].+%/
  artifacts:
    when: always
    paths:
      - $TESTS_PATH/bin/Debug/net7.0/
      - ./**/*test-result.xml
      - ./**/*coverage.cobertura.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: ./**/*/coverage.cobertura.xml
      junit:
        - ./**/*test-result.xml

build-docker:
  variables:
    KANIKO_ARGS: ""
    KANIKO_BUILD_CONTEXT: $CI_PROJECT_DIR
  stage: build-docker
  image:
    name: gcr.io/kaniko-project/executor:v1.10.0-debug
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_TAG
  script: |
    mkdir -p /kaniko/.docker

    DOCKERFILE_PATH=${DOCKERFILE_PATH:-"$KANIKO_BUILD_CONTEXT/Dockerfile"}
    /kaniko/executor \
      --context $KANIKO_BUILD_CONTEXT \
      --dockerfile $DOCKERFILE_PATH \
      --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG \
      $KANIKO_ARGS \
      --destination $CI_REGISTRY_IMAGE:latest

deploy:
    variables:
        CI_REGISTRY_IMAGE: "gitlab.dit.htwk-leipzig.de:5050/live-stream-editor-zur-korrektur-von-untertiteln/backend:latest"
    stage: deploy
    rules:
        - if: $CI_COMMIT_TAG
    script: |
        echo "Deploying to production server..."
        apt-get install -y sshpass
        sshpass -p $DEPLOYMENT_SERVER_PASSWORD projekt2@141.57.21.99
        podman-compose down
        podman pull $CI_REGISTRY_IMAGE
        podman-compose up -d
        exit
