using System.IO.Pipelines;

using Backend.Data;

public class AudioQueueObserver : IObserver<short[]>
{
    private Pipe? pipe;

    private IDisposable? cancellation;

    public virtual void Subscribe(AudioQueue provider)
    {
        pipe = new Pipe();
        cancellation = provider.Subscribe(this);
    }

    public virtual void Unsubscribe()
    {
        pipe.Writer.Complete();
        cancellation?.Dispose();
    }

    public virtual void OnCompleted() => pipe.Writer.Complete();

    public virtual void OnError(Exception e)
    {
        // no implementation
    }

    public virtual void OnNext(short[] audioData)
    {
        byte[] outBuffer = new byte[48000 * 2];
        Buffer.BlockCopy (audioData, 0, outBuffer, 0, audioData.Length * 2);
        pipe.Writer.WriteAsync (outBuffer);
    }

    public PipeReader GetPipe()
    {
        return pipe?.Reader;
    }
}
